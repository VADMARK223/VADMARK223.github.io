{"version":3,"file":"static/js/3.f4cf9244.chunk.js","mappings":"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","sources":["components/affixes/questionAffix/QuestionAffix.tsx","components/affixes/Affixes.tsx","components/common/PhraseItem.tsx"],"sourcesContent":["/**\r\n * Компонент вопросительных аффиксов\r\n *\r\n * @author Markitanov Vadim\r\n * @since 14.05.2023\r\n */\r\nimport React from 'react'\r\nimport './QuestionAffix.css'\r\nimport PhraseItem from '../../common/PhraseItem'\r\nimport { Button } from 'antd'\r\n\r\nconst QuestionAffix = (): JSX.Element => {\r\n  return (\r\n    <>\r\n      <div>\r\n        <h2>Вопросительные аффиксы</h2>\r\n        В вопросительных предложениях к словам, которые выражают предмет интереса присоединяется вопросительных аффикс <b>-бы?</b> (См. таблицу ниже)\r\n        <br/>\r\n        Такие вопросительные предложения называются <b>общими.</b> Они требуют ответа <b>&quot;ооба&rdquo;</b> (да) или <b>&quot;жок&rdquo;</b> (нет).\r\n        <br/>\r\n        Отрицательный ответ на вопрос содержит отрицание <b>&quot;эмес&rdquo;</b> (не). В предложении оно находится после слова, которое отрицается.\r\n        <PhraseItem kg={(<>Сергей студент<u>пи?</u></>)} ru={'Сергей студент?'}/>\r\n        <PhraseItem kg={'Ооба, ал студент.'} ru={'Да, он студент.'}/>\r\n        <PhraseItem kg={(<>(Жок, студент <u>эмес.</u>)</>)} ru={'(Нет, не студент.)'}/>\r\n        <br/>\r\n        <PhraseItem kg={(<>Бул журнал кызыктуу<u>бу?</u></>)} ru={'Этот журнал интересный?'}/>\r\n        <PhraseItem kg={'Ооба, кызыктуу.'} ru={'Да, интересный.'}/>\r\n        <PhraseItem kg={(<>(Жок, кызыктуу <u>эмес.</u>)</>)} ru={'(Нет, не интересный.)'}/>\r\n        В альтернативных вопросительных предложениях используется союз <b>же</b> (или)\r\n        <PhraseItem kg={(<>Бул китеппи <u>же</u> дептерби?</>)} ru={'Это книга или тетрадь?'}/>\r\n        <PhraseItem kg={(<>Бул газета жаңыбы <u>же</u> эскиби?</>)} ru={'Эта газета новая или старая?'}/>\r\n        <br/>\r\n        <table>\r\n          <tbody>\r\n          <tr>\r\n            <td style={{ textAlign: 'left' }}>Последняя гласная буква корня:</td>\r\n            <td colSpan={2}><b>а, я, ы</b></td>\r\n            <td colSpan={2}><b>э, е, и</b></td>\r\n            <td colSpan={2}><b>ө, ү</b></td>\r\n            <td colSpan={2}><b>о, ё, у, ю</b></td>\r\n          </tr>\r\n          <tr>\r\n            <td style={{ textAlign: 'left' }}>Последняя буква корня:</td>\r\n            <td>Глас. или звон согл.</td>\r\n            <td>Глухая согл.</td>\r\n            <td>Глас. или звон согл.</td>\r\n            <td>Глухая согл.</td>\r\n            <td>Глас. или звон согл.</td>\r\n            <td>Глухая согл.</td>\r\n            <td>Глас. или звон согл.</td>\r\n            <td>Глухая согл.</td>\r\n          </tr>\r\n          <tr>\r\n            <td style={{ textAlign: 'left' }}>Аффикс:</td>\r\n            <td><b>-бы</b></td>\r\n            <td><b>-пы</b></td>\r\n            <td><b>-би</b></td>\r\n            <td><b>-пи</b></td>\r\n            <td><b>-бү</b></td>\r\n            <td><b>-пү</b></td>\r\n            <td><b>-бу</b></td>\r\n            <td><b>-пу</b></td>\r\n          </tr>\r\n          <tr>\r\n            <td style={{ textAlign: 'left' }}>Примеры:</td>\r\n            <td>\r\n              Бар<b>бы</b>? (Есть?)\r\n            </td>\r\n            <td>\r\n              Кызык<b>пы</b>? (Интересный?)\r\n            </td>\r\n            <td>\r\n              Текшерди<b>би</b>? (Проверено?)\r\n            </td>\r\n            <td>\r\n              Китеп<b>пи</b>? (Книга?)\r\n            </td>\r\n            <td>\r\n              Үйрендүң<b>бү?</b>\r\n            </td>\r\n            <td>\r\n              Төрт<b>пү</b>? (Четыре?)\r\n            </td>\r\n            <td>\r\n              Коңгуроо<b>бу</b>? (Звонок?)\r\n            </td>\r\n            <td>\r\n              Чоголуш<b>пү</b>? (Собрание?)\r\n            </td>\r\n          </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default QuestionAffix\r\n","/**\r\n * Компонент окончаний\r\n *\r\n * @author Markitanov Vadim\r\n * @since 14.05.2023\r\n */\r\nimport React from 'react'\r\nimport { Tabs } from 'antd'\r\nimport type { TabsProps } from 'antd'\r\nimport QuestionAffix from './questionAffix/QuestionAffix'\r\n\r\nconst Affixes = (): JSX.Element => {\r\n  const items: TabsProps['items'] = [\r\n    {\r\n      key: '1',\r\n      label: 'Вопр',\r\n      children: (<QuestionAffix/>)\r\n    }, {\r\n      key: '2',\r\n      label: 'Множ',\r\n      children: 'В разработке',\r\n      disabled: true\r\n    }\r\n  ]\r\n  return (\r\n    <>\r\n      <b>Аффикс</b> (лат. affixis – прикрепленный) (Мүчө) – служебная\r\n      морфема, которая самостоятельно без корня не употребляется, служит\r\n      для образования различных форм одного и того же слова или\r\n      образования другого однокоренного слова. Таким образом, аффиксы\r\n      делятся на формообразующие и словообразовательные.\r\n      <Tabs tabPosition={'left'} items={items}/>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Affixes\r\n","/**\r\n * Компонент фразы\r\n *\r\n * @author Markitanov Vadim\r\n * @since 14.05.2023\r\n */\r\nimport React from 'react'\r\n\r\ninterface PhraseItemProps {\r\n  kg: string | JSX.Element\r\n  ru: string\r\n}\r\n\r\nconst PhraseItem = (props: PhraseItemProps): JSX.Element => {\r\n  return (\r\n    <div>\r\n      - {props.kg}&nbsp;&nbsp;<i>- {props.ru}</i>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PhraseItem\r\n"],"names":["_jsx","_Fragment","children","_jsxs","PhraseItem","kg","ru","style","textAlign","colSpan","items","key","label","QuestionAffix","disabled","Tabs","tabPosition","props"],"sourceRoot":""}